[{"/Users/junhee/Downloads/invoice/src/index.js":"1","/Users/junhee/Downloads/invoice/src/reportWebVitals.js":"2","/Users/junhee/Downloads/invoice/src/App.js":"3","/Users/junhee/Downloads/invoice/src/Coordinate.js":"4","/Users/junhee/Downloads/invoice/src/InvoiceProcess.js":"5","/Users/junhee/Downloads/invoice/src/BoardItem.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":617,"mtime":1614845080000,"results":"10","hashOfConfig":"8"},{"size":11881,"mtime":1617538183421,"results":"11","hashOfConfig":"8"},{"size":9017,"mtime":1616136578000,"results":"12","hashOfConfig":"8"},{"size":1755,"mtime":1614931358000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"83c7bb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/junhee/Downloads/invoice/src/index.js",[],["29","30"],"/Users/junhee/Downloads/invoice/src/reportWebVitals.js",[],"/Users/junhee/Downloads/invoice/src/App.js",[],"/Users/junhee/Downloads/invoice/src/Coordinate.js",["31","32","33","34","35","36","37","38","39","40"],"/Users/junhee/Downloads/invoice/src/InvoiceProcess.js",["41","42","43","44"],"import React, { Component } from 'react';\nimport BoardItem from './BoardItem';\n\nimport './App.css';\n\n\nclass InvoiceProcess extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataList:null\n            , IP:'127.0.0.1:8728'\n            // , IP:'10.33.194.28:4406'\n            // , rootDir : '/bigdata/RPA/frontend-reactjs/invoice/build/'\n            , rootDir : 'D:\\\\WorkSpace\\\\workspace_RPA\\\\invoice\\\\public\\\\'\n            , id:''\n            , unit:''\n            , x : 0\n            , y : 0\n            , context : ''\n\n            , canvasWidth : 800\n            , canvasHeight : 1200\n            , canvasMultiple : 5\n        }\n    }\n    getToday = () => {\n        let date = new Date();\n        let year = date.getFullYear();\n        let month = (\"0\" + (1 + date.getMonth())).slice(-2);\n        let day = (\"0\" + date.getDate()).slice(-2);\n        let today = year + month + day;\n        let getDate = window.document.getElementById(\"getDate\");\n        getDate.value =  today;\n    }\n    callGetListData = (e) => {\n        const getDate = window.document.getElementById(\"getDate\").value;\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json'\n                , 'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                methodName: 'ListData'\n                , date: getDate\n            })\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.setState({\n                dataList:JSON.parse(json)\n            })\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    }\n    \n   \n    fileUpload = (idParam) => {\n        let formData = new FormData();\n        formData.append('methodName', 'FileUpload');\n\n        for (const file of document.getElementById(\"uploadFIle\").files) {\n            formData.append('uploadFile',file,file.name)\n        }\n\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            body: formData\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.setState({\n                id: idParam\n            })\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    }\n\n    callUpdateData = (e) => {\n        if (document.getElementById(\"dataText\") == null) return;\n        const dataText = document.getElementById(\"dataText\").value\n        if ( dataText == \"\" ) {\n            alert('uploadText should not be an empty field.');\n            return ;\n        }\n        let formData = new FormData();\n        formData.append('methodName', 'UpdateData');\n        formData.append('id', this.state.id);\n        formData.append('unit', this.state.unit);\n        formData.append('text', dataText);\n\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            body: formData\n        })\n        .then(res => res.json())\n        .then(\n            this.callGetListData\n            \n        )\n        .catch((error) => {\n            console.error(error);\n        });\n        document.getElementById(\"imageFile\").src= \"\";\n        document.getElementById(\"txtPanel\").innerHTML = \"\";\n\n    }\n    \n    showImage = (id, path, unit,text) =>{\n        // document.getElementById(\"imageFile\").src = \"/invoice\" + path;\n        document.getElementById(\"imageFile\").src = path;\n        document.getElementById(\"txtPanel\").innerHTML = \"\";\n        let txt = \"<div style='position:float'>\"+unit+\" : <input type='text' id='dataText' value='\" + text + \"' size='80' />\"\n        document.getElementById(\"txtPanel\").innerHTML += txt;\n\n        // canvas 영역\n\t\t// const canvas = document.getElementById(\"canvas\");\n        // let context = canvas.getContext(\"2d\");\n\t\t// const image = new Image(this.state.canvasHeight, this.state.canvasWidth); // Using optional size for image\n\t\t// image.src= path;\n\t\t// context.drawImage( image , 0, 0,this.state.canvasWidth, this.state.canvasHeight);\n        // this.setState({context:context})\n    };\n\n\tgetLocation = (e) => {\n\t\tconst coorX = e.view.event.layerX\n\t\tconst coorY = e.view.event.layerY\n        const x = this.state.x\n        const y = this.state.y\n        const context = this.state.context\n        context.globalAlpha = 0.2;\n        \n\t\tif (x == 0 && y == 0) {\n\t\t\tthis.setState({x:coorX, y:coorY})\n            context.beginPath();\n            context.fillStyle = 'blue';\n            context.arc(coorX, coorY, 5, 0, 2 * Math.PI);\n            context.fill();\n            context.closePath();\n        }else{\n            this.setState({x:0,y:0})\n            const text = x+\",\"+y +\" / \" +(coorX)+\",\"+(coorY)\n            // context.strokeRect(x,y,coorX-x,coorY-y);\n            context.beginPath();\n            context.fillStyle = 'blue';\n            context.arc(coorX, coorY, 5, 0, 2 * Math.PI);\n            context.fill();\n            context.fillStyle = \"red\";\n            context.fillRect(x,y,coorX-x,coorY-y);\n\n            context.globalAlpha = 1;\n            context.fillStyle = \"black\";\n            context.fillText(text, coorX,coorY);\n            context.closePath();\n\n            // DB에 넣을때는 화면과 size가 다르기때문에, 맞춰서 데이터를 준다.\n            // console.log(x * this.state.canvasMultiple\n            //     , y * this.state.canvasMultiple\n            //     , coorX * this.state.canvasMultiple-x * this.state.canvasMultiple\n            //     , coorY * this.state.canvasMultiple-y * this.state.canvasMultiple);\n            // 아래부터는 DB에 데이터 전송이 필요.\n            // ...\n        }\n    };\n    render( ) {\n        let dataValue = [];\n        let imgDirectory = \"\"\n        if (this.state.dataList){\n            dataValue = this.state.dataList.value;\n        }\n        const divStyle = { \n            backgroundImage: 'url(' + imgDirectory + ')' \n            ,backgroundPosition: 'cover'\n            ,backgroundRepeat: 'noRepeat'\n            ,backgroundSize: 'cover'\n            ,width: '850px'\n            // ,height: '1200px'\n            , height: 'auto'\n        };\n\n        return (            \n            <div>\n                <h1>Invoice Data Process</h1>\n                <button onClick={ () => {this.props.history.push(\"/Coordinate\")}}> Coordinate </button>\n                <p/>\n                Upload file(zip, pdf, png) : <input type=\"file\" id=\"uploadFIle\" name=\"uploadFIle[]\" accept=\"image/png, image/jpeg, .zip, .pdf\"  multiple></input>\n                {/* <input type=\"text\" id=\"uploadText\"></input> */}\n                <button type=\"button\" onClick={this.fileUpload}>File Upload</button>\n                <p/>\n                Date : <input type=\"text\" id=\"getDate\" ref={this.getToday}></input>\n                <button type=\"button\" onClick={this.callGetListData}>go Query</button>\n                <p/>\n                <table border=\"1\">\n                    <tbody>\n                        <tr align=\"center\">\n                            <td width=\"50\">id</td>\n                            <td width=\"100\">name</td>\n                            <td width=\"100\">unit</td>\n                            <td width=\"1000\">text</td>\n                            <td width=\"100\">filePath</td> \n                            <td width=\"100\">updateDate</td>\n                            <td width=\"100\">updateTime</td>\n                        </tr>\n                        {\n                            dataValue.map(row =>\n                                (<BoardItem key={row.id} row={row} clickEvent={function(id, path, unit, text){\n                                    this.setState({id:id, imgDir:path, unit:unit});\n                                    this.showImage(id, path, unit, text);\n                                }.bind(this)}\n                                />)\n                            )   \n                        }\n                    </tbody>\n                </table>\n                <table border=\"1\" width=\"1600\" height=\"720\">\n                    <tbody>\n                        <tr>\n                            <td align=\"center\">\n                                <img src={imgDirectory} style={divStyle} id=\"imageFile\"></img>\n                            </td>\n                            <td align=\"center\">\n                                {/* <img src={imgDirectory} class='imgClass'></img> */}\n                                <div id=\"txtPanel\" align=\"left\" style={divStyle} ></div>\n                            </td> \n                        </tr>\n                        <tr>\n                            <button type='button' onClick={this.callUpdateData}>Update Data</button>\n                        </tr>\n                    </tbody>\n                </table>\n                \n                {/* <canvas id=\"canvas\" height=\"1200\" width=\"800\" onClick={this.getLocation}>This browser doesn't support canvas</canvas> */}\n\n            </div>\n        );\n    }\n}\n\nexport default InvoiceProcess; \n","/Users/junhee/Downloads/invoice/src/BoardItem.js",["45","46","47","48","49","50"],"import React, {Component} from 'react';\n\nexport class BoardItem extends Component {\n    render() {\n        console.log(\"BoardRow start\");\n        // handleSelectRow = () => {\n        //     const { row, onSelectRow } = this.props;\n        //     onSelectRow(row);\n        // } \n        return(\n            <tr>\n                <td><a href='.' onClick={function(event){\n                    event.preventDefault();\n                    this.props.clickEvent(\n                        this.props.row.id\n                        , this.props.row.fileShortPath\n                        , this.props.row.unit\n                        , this.props.row.text\n                        );\n                    }.bind(this)}>\n                    {this.props.row.id}</a>\n                </td>\n                <td><a onClick={this.handleSelectRow}>{this.props.row.name}</a></td>\n                <td><a onClick={this.handleSelectRow}>{this.props.row.unit}</a></td>\n                <td><a onClick={this.handleSelectRow}>{this.props.row.text}</a></td>\n                <td><a onClick={this.handleSelectRow}>{this.props.row.filePath}</a></td>\n                <td><a onClick={this.handleSelectRow}>{this.props.row.updateDate}</a></td>\n                <td><a onClick={this.handleSelectRow}>{this.props.row.updateTime}</a></td>\n                {/* <td><a onClick={this.handleSelectRow}>{this.props.row.brdtitle}</a></td> */}\n                {/* <td>{this.props.row.brdwriter}</td>\n                <td>{this.props.row.brddate.toLocaleDateString('ko-KR')}</td>\n                <td>{this.props.row.brddate.toLocaleDateString('ko-KR')}</td>\n                <td>{this.props.row.brddate.toLocaleDateString('ko-KR')}</td> */}\n            </tr>\n        );\n    }\n}\n\nexport default BoardItem;\n\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":55,"column":20,"nodeType":"57","messageId":"58","endLine":55,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":90,"column":20,"nodeType":"57","messageId":"58","endLine":90,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":98,"column":15,"nodeType":"57","messageId":"58","endLine":98,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":98,"column":25,"nodeType":"57","messageId":"58","endLine":98,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":110,"column":20,"nodeType":"57","messageId":"58","endLine":110,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":118,"column":15,"nodeType":"57","messageId":"58","endLine":118,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":118,"column":25,"nodeType":"57","messageId":"58","endLine":118,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":190,"column":24,"nodeType":"57","messageId":"58","endLine":190,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":234,"column":28,"nodeType":"61","endLine":234,"endColumn":57},{"ruleId":"62","severity":1,"message":"63","line":236,"column":11,"nodeType":"64","messageId":"65","endLine":236,"endColumn":24},{"ruleId":"55","severity":1,"message":"56","line":87,"column":23,"nodeType":"57","messageId":"58","endLine":87,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":138,"column":9,"nodeType":"57","messageId":"58","endLine":138,"endColumn":11},{"ruleId":"55","severity":1,"message":"56","line":138,"column":19,"nodeType":"57","messageId":"58","endLine":138,"endColumn":21},{"ruleId":"59","severity":1,"message":"60","line":224,"column":33,"nodeType":"61","endLine":224,"endColumn":89},{"ruleId":"66","severity":1,"message":"67","line":23,"column":21,"nodeType":"61","endLine":23,"endColumn":55},{"ruleId":"66","severity":1,"message":"67","line":24,"column":21,"nodeType":"61","endLine":24,"endColumn":55},{"ruleId":"66","severity":1,"message":"67","line":25,"column":21,"nodeType":"61","endLine":25,"endColumn":55},{"ruleId":"66","severity":1,"message":"67","line":26,"column":21,"nodeType":"61","endLine":26,"endColumn":55},{"ruleId":"66","severity":1,"message":"67","line":27,"column":21,"nodeType":"61","endLine":27,"endColumn":55},{"ruleId":"66","severity":1,"message":"67","line":28,"column":21,"nodeType":"61","endLine":28,"endColumn":55},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'$imagePreview' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]