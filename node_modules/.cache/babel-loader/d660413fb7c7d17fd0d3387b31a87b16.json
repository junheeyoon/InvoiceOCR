{"ast":null,"code":"var _jsxFileName = \"D:\\\\WorkSpace\\\\workspace_RPA\\\\invoice\\\\src\\\\InvoiceProcess.js\";\nimport React, { Component } from 'react';\nimport BoardItem from './BoardItem';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InvoiceProcess extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callGetListData = e => {\n      const getDate = window.document.getElementById(\"getDate\").value;\n      fetch(\"http://\" + this.state.IP + \"/RPA/Invoice/getOCR\", {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          methodName: 'ListData',\n          date: getDate\n        })\n      }).then(res => res.json()).then(json => {\n        this.setState({\n          dataList: JSON.parse(json)\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    };\n\n    this.fileUpload = idParam => {\n      let formData = new FormData();\n      formData.append('methodName', 'FileUpload');\n\n      for (const file of document.getElementById(\"uploadFIle\").files) {\n        formData.append('uploadFile', file, file.name);\n      }\n\n      fetch(\"http://\" + this.state.IP + \"/RPA/Invoice/getOCR\", {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json()).then(json => {\n        this.setState({\n          id: idParam\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    };\n\n    this.callUpdateData = e => {\n      const dataText = document.getElementById(\"dataText\").value;\n\n      if (dataText == \"\") {\n        alert('uploadText should not be an empty field.');\n        return;\n      }\n\n      let formData = new FormData();\n      formData.append('methodName', 'UpdateData');\n      formData.append('id', id);\n      formData.append('unit', unit);\n      formData.append('text', dataText);\n      fetch(\"http://\" + this.state.IP + \"/RPA/Invoice/getOCR\", {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json()).then(json => {\n        this.setState({\n          dataList: JSON.parse(json)\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    };\n\n    this.showImage = (id, path, unit, text) => {\n      document.getElementById(\"imageFile\").src = path;\n      document.getElementById(\"txtPanel\").innerHTML = \"\";\n      let txt = \"<div style='position:float'>\" + unit + \" : <input type='text' id='dataText' value='\" + text + \"' size='80' />\"; // txt = txt + \"<button type='button' onClick=\" + this.callUpdateData + \">Update Data</button></div>\";\n\n      document.getElementById(\"txtPanel\").innerHTML += txt;\n    };\n\n    this.state = {\n      dataList: [],\n      IP: '127.0.0.1:8728',\n      rootDir: 'D:\\\\WorkSpace\\\\workspace_RPA\\\\invoice\\\\public\\\\'\n    };\n  }\n\n  render() {\n    // this.createTextBox();\n    let dataValue = [];\n    let imgDirectory = \"\";\n\n    if (this.state.dataList.value !== undefined) {\n      dataValue = this.state.dataList.value;\n    } // if (this.state.imgDir !== undefined){\n    //     imgDirectory = this.state.imgDir;\n    // }\n\n\n    const divStyle = {\n      backgroundImage: 'url(' + imgDirectory + ')',\n      backgroundPosition: 'cover',\n      backgroundRepeat: 'noRepeat',\n      backgroundSize: 'cover',\n      width: '850px' // ,height: '1200px'\n      ,\n      height: 'auto'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Invoice Data Process\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 46\n      }, this), \"Upload file(zip, pdf, png) : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"uploadFIle\",\n        name: \"uploadFIle[]\",\n        accept: \"image/png, image/jpeg, .zip, .pdf\",\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 46\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.fileUpload,\n        children: \"File Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), \"Date : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"getDate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.callGetListData,\n        children: \"go Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"50\",\n              children: \"id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"invoiceName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"unit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"1000\",\n              children: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"filePath\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"updateDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"updateTime\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), dataValue.map(row => /*#__PURE__*/_jsxDEV(BoardItem, {\n            row: row,\n            clickEvent: function (id, path, unit, text) {\n              this.setState({\n                id: id,\n                imgDir: path,\n                unit: unit,\n                text: text\n              });\n              this.showImage(id, path, unit, text);\n            }.bind(this)\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 34\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        width: \"1600\",\n        height: \"720\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imgDirectory,\n                style: divStyle,\n                id: \"imageFile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"txtPanel\",\n                align: \"left\",\n                style: divStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default InvoiceProcess;","map":{"version":3,"sources":["D:/WorkSpace/workspace_RPA/invoice/src/InvoiceProcess.js"],"names":["React","Component","BoardItem","InvoiceProcess","constructor","props","callGetListData","e","getDate","window","document","getElementById","value","fetch","state","IP","method","headers","Accept","body","JSON","stringify","methodName","date","then","res","json","setState","dataList","parse","catch","error","console","fileUpload","idParam","formData","FormData","append","file","files","name","id","callUpdateData","dataText","alert","unit","showImage","path","text","src","innerHTML","txt","rootDir","render","dataValue","imgDirectory","undefined","divStyle","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","width","height","map","row","imgDir","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport BoardItem from './BoardItem';\nimport './App.css';\n\n\nclass InvoiceProcess extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataList:[]\n            , IP:'127.0.0.1:8728'\n            , rootDir : 'D:\\\\WorkSpace\\\\workspace_RPA\\\\invoice\\\\public\\\\'\n        }\n    }\n\n    callGetListData = (e) => {\n        const getDate = window.document.getElementById(\"getDate\").value;\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json'\n                , 'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                methodName: 'ListData'\n                , date: getDate\n            })\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.setState({\n                dataList:JSON.parse(json)\n            })\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    }\n    \n   \n    fileUpload = (idParam) => {\n        let formData = new FormData();\n        formData.append('methodName', 'FileUpload');\n\n        for (const file of document.getElementById(\"uploadFIle\").files) {\n            formData.append('uploadFile',file,file.name)\n        }\n\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            body: formData\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.setState({\n                id: idParam\n            })\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    }\n    \n    callUpdateData = (e) => {\n        const dataText = document.getElementById(\"dataText\").value\n        if ( dataText == \"\" ) {\n            alert('uploadText should not be an empty field.');\n            return ;\n        }\n        let formData = new FormData();\n        formData.append('methodName', 'UpdateData');\n        formData.append('id', id);\n        formData.append('unit', unit);\n        formData.append('text', dataText);\n\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            body: formData\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.setState({\n                dataList:JSON.parse(json)\n            })\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    }\n    // createTextBox = () =>{\n    //     const valueArray = this.state.dataDetail;\n        \n    //     if (valueArray && valueArray.value &&  valueArray.value.length > 0){\n    //         document.getElementById(\"txtPanel\").innerHTML = \"\";\n\n    //         let txt\n    //         for (const [key, value] of Object.entries(valueArray.value)) {\n    //             console.log(key, value);\n    //             // const size = value.edCoordX-value.stCoordX;\n    //             console.log(value.stCoordX);\n    //             // txt = \"<div style='margin: \" + value.stCoordX + \"px \" +value.stCoordY+\"px'><input type='text' size=\" + value.text.length + \" value='\" + value.text + \"' /><br/></div>\";\n    //             txt = \"<input type='text' size=\" + value.text.length + \" value='\" + value.text + \"' /><br/>\";\n    //             console.log(txt);\n    //             document.getElementById(\"txtPanel\").innerHTML += txt;\n    //         }\n    //     }else if(document.getElementById(\"txtPanel\")){\n    //         document.getElementById(\"txtPanel\").innerHTML = \"\";\n    //     }\n    // };\n    showImage = (id, path, unit,text) =>{\n        document.getElementById(\"imageFile\").src = path;\n        document.getElementById(\"txtPanel\").innerHTML = \"\";\n        let txt = \"<div style='position:float'>\"+unit+\" : <input type='text' id='dataText' value='\" + text + \"' size='80' />\"\n        // txt = txt + \"<button type='button' onClick=\" + this.callUpdateData + \">Update Data</button></div>\";\n        document.getElementById(\"txtPanel\").innerHTML += txt;\n    };\n    render() {\n        // this.createTextBox();\n        let dataValue = [];\n        let imgDirectory = \"\"\n        if (this.state.dataList.value !== undefined){\n            dataValue = this.state.dataList.value;\n        }\n        // if (this.state.imgDir !== undefined){\n        //     imgDirectory = this.state.imgDir;\n        // }\n        const divStyle = { \n            backgroundImage: 'url(' + imgDirectory + ')' \n            ,backgroundPosition: 'cover'\n            ,backgroundRepeat: 'noRepeat'\n            ,backgroundSize: 'cover'\n            ,width: '850px'\n            // ,height: '1200px'\n            , height: 'auto'\n        };\n        return (\n            <div>\n                <h1>Invoice Data Process</h1><p/>\n                Upload file(zip, pdf, png) : <input type=\"file\" id=\"uploadFIle\" name=\"uploadFIle[]\" accept=\"image/png, image/jpeg, .zip, .pdf\"  multiple></input>\n                {/* <input type=\"text\" id=\"uploadText\"></input> */}\n                <button type=\"button\" onClick={this.fileUpload}>File Upload</button>\n                <p/>\n                Date : <input type=\"text\" id=\"getDate\"></input>\n                <button type=\"button\" onClick={this.callGetListData}>go Query</button>\n                <p/>\n                <table border=\"1\">\n                    <tbody>\n                        <tr align=\"center\">\n                            <td width=\"50\">id</td>\n                            <td width=\"100\">invoiceName</td>\n                            <td width=\"100\">unit</td>\n                            <td width=\"1000\">text</td>\n                            <td width=\"100\">filePath</td> \n                            <td width=\"100\">updateDate</td>\n                            <td width=\"100\">updateTime</td>\n                        </tr>\n                        {\n                            dataValue.map(row =>\n                                (<BoardItem key={row.id} row={row} clickEvent={function(id, path, unit, text){\n                                    this.setState({id:id, imgDir:path, unit:unit, text:text});\n                                    this.showImage(id, path, unit, text);\n                                }.bind(this)}\n                                />)\n                            )   \n                        }\n                    </tbody>\n                </table>\n                <table border=\"1\" width=\"1600\" height=\"720\">\n                    <tbody>\n                        <tr>\n                            <td align=\"center\">\n                                <img src={imgDirectory} style={divStyle} id=\"imageFile\"></img>\n                            </td>\n                            <td align=\"center\">\n                                {/* <img src={imgDirectory} class='imgClass'></img> */}\n                                <div id=\"txtPanel\" align=\"left\" style={divStyle} ></div>\n                            </td> \n                        </tr>\n                    </tbody>\n                </table>\n                \n            </div>\n        );\n    }\n}\n\nexport default InvoiceProcess;\n"]},"metadata":{},"sourceType":"module"}