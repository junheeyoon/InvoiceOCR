{"ast":null,"code":"var _jsxFileName = \"D:\\\\WorkSpace\\\\workspace_RPA\\\\invoice\\\\src\\\\InvoiceProcess.js\";\nimport React, { Component } from 'react';\nimport BoardItem from './BoardItem';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InvoiceProcess extends Component {\n  constructor(props) {\n    // super(props);\n    this.state = {\n      dataList: [],\n      IP: '127.0.0.1:8728' // , IP:'10.33.194.28:4406'\n      // , rootDir : '/bigdata/RPA/frontend-reactjs/invoice/build/'\n      ,\n      rootDir: 'D:\\\\WorkSpace\\\\workspace_RPA\\\\invoice\\\\public\\\\',\n      id: '',\n      unit: '',\n      x: 0,\n      y: 0,\n      context: ''\n    };\n  }\n\n  render() {\n    // this.createTextBox();\n    let dataValue = [];\n    let imgDirectory = \"\";\n\n    if (this.state.dataList.value !== undefined) {\n      dataValue = this.state.dataList.value;\n    } // if (this.state.imgDir !== undefined){\n    //     imgDirectory = this.state.imgDir;\n    // }\n\n\n    const divStyle = {\n      backgroundImage: 'url(' + imgDirectory + ')',\n      backgroundPosition: 'cover',\n      backgroundRepeat: 'noRepeat',\n      backgroundSize: 'cover',\n      width: '850px' // ,height: '1200px'\n      ,\n      height: 'auto'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Invoice Data Process\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 46\n      }, this), \"Upload file(zip, pdf, png) : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"uploadFIle\",\n        name: \"uploadFIle[]\",\n        accept: \"image/png, image/jpeg, .zip, .pdf\",\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 46\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.fileUpload,\n        children: \"File Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), \"Date : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"getDate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.callGetListData,\n        children: \"go Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"50\",\n              children: \"id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"invoiceName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"unit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"1000\",\n              children: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"filePath\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"updateDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              width: \"100\",\n              children: \"updateTime\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), dataValue.map(row => /*#__PURE__*/_jsxDEV(BoardItem, {\n            row: row,\n            clickEvent: function (id, path, unit, text) {\n              this.setState({\n                id: id,\n                imgDir: path,\n                unit: unit\n              });\n              this.showImage(id, path, unit, text);\n            }.bind(this)\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 34\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        width: \"1600\",\n        height: \"720\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imgDirectory,\n                style: divStyle,\n                id: \"imageFile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"txtPanel\",\n                align: \"left\",\n                style: divStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: this.callUpdateData,\n              children: \"Update Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas\",\n        height: \"1200\",\n        width: \"800\",\n        onClick: this.getLoc,\n        children: \"This browser doesn't support canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default InvoiceProcess;","map":{"version":3,"sources":["D:/WorkSpace/workspace_RPA/invoice/src/InvoiceProcess.js"],"names":["React","Component","BoardItem","InvoiceProcess","constructor","props","state","dataList","IP","rootDir","id","unit","x","y","context","render","dataValue","imgDirectory","value","undefined","divStyle","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","width","height","fileUpload","callGetListData","map","row","path","text","setState","imgDir","showImage","bind","callUpdateData","getLoc"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,WAAP;;;AAGA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACnCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAC,EADA;AAEPC,MAAAA,EAAE,EAAC,gBAFI,CAGT;AACA;AAJS;AAKPC,MAAAA,OAAO,EAAG,iDALH;AAMPC,MAAAA,EAAE,EAAC,EANI;AAOPC,MAAAA,IAAI,EAAC,EAPE;AAQPC,MAAAA,CAAC,EAAG,CARG;AASPC,MAAAA,CAAC,EAAG,CATG;AAUPC,MAAAA,OAAO,EAAG;AAVH,KAAb;AAaH;;AAiHDC,EAAAA,MAAM,GAAG;AACL;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA,QAAI,KAAKX,KAAL,CAAWC,QAAX,CAAoBW,KAApB,KAA8BC,SAAlC,EAA4C;AACxCH,MAAAA,SAAS,GAAG,KAAKV,KAAL,CAAWC,QAAX,CAAoBW,KAAhC;AACH,KANI,CAOL;AACA;AACA;;;AACA,UAAME,QAAQ,GAAG;AACbC,MAAAA,eAAe,EAAE,SAASJ,YAAT,GAAwB,GAD5B;AAEZK,MAAAA,kBAAkB,EAAE,OAFR;AAGZC,MAAAA,gBAAgB,EAAE,UAHN;AAIZC,MAAAA,cAAc,EAAE,OAJJ;AAKZC,MAAAA,KAAK,EAAE,OALK,CAMb;AANa;AAOXC,MAAAA,MAAM,EAAE;AAPG,KAAjB;AAUA,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eACiC;AAAA;AAAA;AAAA;AAAA,cADjC,gDAEiC;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,YAAtB;AAAmC,QAAA,IAAI,EAAC,cAAxC;AAAuD,QAAA,MAAM,EAAC,mCAA9D;AAAmG,QAAA,QAAQ;AAA3G;AAAA;AAAA;AAAA;AAAA,cAFjC,eAII;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA,cALJ,0BAMW;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cANX,eAOI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,eAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAA;AAAA;AAAA;AAAA,cARJ,eASI;AAAO,QAAA,MAAM,EAAC,GAAd;AAAA,+BACI;AAAA,kCACI;AAAI,YAAA,KAAK,EAAC,QAAV;AAAA,oCACI;AAAI,cAAA,KAAK,EAAC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAI,cAAA,KAAK,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,eAOI;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAWQZ,SAAS,CAACa,GAAV,CAAcC,GAAG,iBACZ,QAAC,SAAD;AAAwB,YAAA,GAAG,EAAEA,GAA7B;AAAkC,YAAA,UAAU,EAAE,UAASpB,EAAT,EAAaqB,IAAb,EAAmBpB,IAAnB,EAAyBqB,IAAzB,EAA8B;AACzE,mBAAKC,QAAL,CAAc;AAACvB,gBAAAA,EAAE,EAACA,EAAJ;AAAQwB,gBAAAA,MAAM,EAACH,IAAf;AAAqBpB,gBAAAA,IAAI,EAACA;AAA1B,eAAd;AACA,mBAAKwB,SAAL,CAAezB,EAAf,EAAmBqB,IAAnB,EAAyBpB,IAAzB,EAA+BqB,IAA/B;AACH,aAH8C,CAG7CI,IAH6C,CAGxC,IAHwC;AAA9C,aAAgBN,GAAG,CAACpB,EAApB;AAAA;AAAA;AAAA;AAAA,kBADL,CAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ,eA+BI;AAAO,QAAA,MAAM,EAAC,GAAd;AAAkB,QAAA,KAAK,EAAC,MAAxB;AAA+B,QAAA,MAAM,EAAC,KAAtC;AAAA,+BACI;AAAA,kCACI;AAAA,oCACI;AAAI,cAAA,KAAK,EAAC,QAAV;AAAA,qCACI;AAAK,gBAAA,GAAG,EAAEO,YAAV;AAAwB,gBAAA,KAAK,EAAEG,QAA/B;AAAyC,gBAAA,EAAE,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII;AAAI,cAAA,KAAK,EAAC,QAAV;AAAA,qCAEI;AAAK,gBAAA,EAAE,EAAC,UAAR;AAAmB,gBAAA,KAAK,EAAC,MAAzB;AAAgC,gBAAA,KAAK,EAAEA;AAAvC;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAUI;AAAA,mCACI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,OAAO,EAAE,KAAKiB,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA/BJ,eAgDI;AAAQ,QAAA,EAAE,EAAC,QAAX;AAAoB,QAAA,MAAM,EAAC,MAA3B;AAAkC,QAAA,KAAK,EAAC,KAAxC;AAA8C,QAAA,OAAO,EAAE,KAAKC,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhDJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqDH;;AA1MkC;;AA6MvC,eAAenC,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport BoardItem from './BoardItem';\nimport './App.css';\n\n\nclass InvoiceProcess extends Component {\n    constructor(props) {\n        // super(props);\n        this.state = {\n            dataList:[]\n            , IP:'127.0.0.1:8728'\n            // , IP:'10.33.194.28:4406'\n            // , rootDir : '/bigdata/RPA/frontend-reactjs/invoice/build/'\n            , rootDir : 'D:\\\\WorkSpace\\\\workspace_RPA\\\\invoice\\\\public\\\\'\n            , id:''\n            , unit:''\n            , x : 0\n            , y : 0\n            , context : ''\n        }\n\n    }\n\n    callGetListData = (e) => {\n        const getDate = window.document.getElementById(\"getDate\").value;\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json'\n                , 'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                methodName: 'ListData'\n                , date: getDate\n            })\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.setState({\n                dataList:JSON.parse(json)\n            })\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    }\n    \n   \n    fileUpload = (idParam) => {\n        let formData = new FormData();\n        formData.append('methodName', 'FileUpload');\n\n        for (const file of document.getElementById(\"uploadFIle\").files) {\n            formData.append('uploadFile',file,file.name)\n        }\n\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            body: formData\n        })\n        .then(res => res.json())\n        .then(json => {\n            this.setState({\n                id: idParam\n            })\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    }\n    \n    callUpdateData = (e) => {\n        if (document.getElementById(\"dataText\") == null) return;\n        const dataText = document.getElementById(\"dataText\").value\n        if ( dataText == \"\" ) {\n            alert('uploadText should not be an empty field.');\n            return ;\n        }\n        let formData = new FormData();\n        formData.append('methodName', 'UpdateData');\n        formData.append('id', this.state.id);\n        formData.append('unit', this.state.unit);\n        formData.append('text', dataText);\n\n        fetch(\"http://\"+this.state.IP+\"/RPA/Invoice/getOCR\", {\n            method: 'POST',\n            body: formData\n        })\n        .then(res => res.json())\n        .then(\n            this.callGetListData\n            \n        )\n        .catch((error) => {\n            console.error(error);\n        });\n        document.getElementById(\"imageFile\").src= \"\";\n        document.getElementById(\"txtPanel\").innerHTML = \"\";\n\n    }\n    \n    showImage = (id, path, unit,text) =>{\n        // document.getElementById(\"imageFile\").src = \"/invoice\" + path;\n        document.getElementById(\"imageFile\").src = path;\n        document.getElementById(\"txtPanel\").innerHTML = \"\";\n        let txt = \"<div style='position:float'>\"+unit+\" : <input type='text' id='dataText' value='\" + text + \"' size='80' />\"\n        document.getElementById(\"txtPanel\").innerHTML += txt;\n\n\n\n\n\n\t\tconst canvas = document.getElementById(\"canvas\");\n        let context = canvas.getContext(\"2d\");\n\t\tconst image = new Image(1200, 800); // Using optional size for image\n\t\timage.src= path;\n\t\tcontext.drawImage( image , 0, 0,800, 1200);\n        this.setState({context:context})\n    };\n\n\tgetLoc = (e) => {\n\t\tconst coorX = (e.view.event.layerX)\n\t\tconst coorY = (e.view.event.layerY)\n        const x = this.state.x\n        const y = this.state.y\n        \n\t\tif (x == 0 || y == 0) {\n\t\t\tthis.setState({x:coorX, y:coorY})\n\t\t}else{\n            this.setState({x:0,y:0})\n            this.state.context.strokeRect(x,y,coorX-x,coorY-y);\n            console.log(x,y,coorX-x,coorY-y)\n        }\n    };\n    render() {\n        // this.createTextBox();\n        let dataValue = [];\n        let imgDirectory = \"\"\n        if (this.state.dataList.value !== undefined){\n            dataValue = this.state.dataList.value;\n        }\n        // if (this.state.imgDir !== undefined){\n        //     imgDirectory = this.state.imgDir;\n        // }\n        const divStyle = { \n            backgroundImage: 'url(' + imgDirectory + ')' \n            ,backgroundPosition: 'cover'\n            ,backgroundRepeat: 'noRepeat'\n            ,backgroundSize: 'cover'\n            ,width: '850px'\n            // ,height: '1200px'\n            , height: 'auto'\n        };\n            \n        return (\n            <div>\n                <h1>Invoice Data Process</h1><p/>\n                Upload file(zip, pdf, png) : <input type=\"file\" id=\"uploadFIle\" name=\"uploadFIle[]\" accept=\"image/png, image/jpeg, .zip, .pdf\"  multiple></input>\n                {/* <input type=\"text\" id=\"uploadText\"></input> */}\n                <button type=\"button\" onClick={this.fileUpload}>File Upload</button>\n                <p/>\n                Date : <input type=\"text\" id=\"getDate\"></input>\n                <button type=\"button\" onClick={this.callGetListData}>go Query</button>\n                <p/>\n                <table border=\"1\">\n                    <tbody>\n                        <tr align=\"center\">\n                            <td width=\"50\">id</td>\n                            <td width=\"100\">invoiceName</td>\n                            <td width=\"100\">unit</td>\n                            <td width=\"1000\">text</td>\n                            <td width=\"100\">filePath</td> \n                            <td width=\"100\">updateDate</td>\n                            <td width=\"100\">updateTime</td>\n                        </tr>\n                        {\n                            dataValue.map(row =>\n                                (<BoardItem key={row.id} row={row} clickEvent={function(id, path, unit, text){\n                                    this.setState({id:id, imgDir:path, unit:unit});\n                                    this.showImage(id, path, unit, text);\n                                }.bind(this)}\n                                />)\n                            )   \n                        }\n                    </tbody>\n                </table>\n                <table border=\"1\" width=\"1600\" height=\"720\">\n                    <tbody>\n                        <tr>\n                            <td align=\"center\">\n                                <img src={imgDirectory} style={divStyle} id=\"imageFile\"></img>\n                            </td>\n                            <td align=\"center\">\n                                {/* <img src={imgDirectory} class='imgClass'></img> */}\n                                <div id=\"txtPanel\" align=\"left\" style={divStyle} ></div>\n                            </td> \n                        </tr>\n                        <tr>\n                            <button type='button' onClick={this.callUpdateData}>Update Data</button>\n                        </tr>\n                    </tbody>\n                </table>\n                \n                <canvas id=\"canvas\" height=\"1200\" width=\"800\" onClick={this.getLoc}>This browser doesn't support canvas</canvas>\n\n            </div>\n        );\n    }\n}\n\nexport default InvoiceProcess;\n"]},"metadata":{},"sourceType":"module"}